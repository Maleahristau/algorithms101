# Assignment Six:
### Show your understanding of common searching algorithms.
Create methods that searches the same data set using each of the different algorithms, and contain information on their performance:
- Linear
- Binary
- Interpolation 
In each method include comments that explain how your method demonstrates the concept.

## Example of Bubble Sort
```
procedure bubbleSort(A : list of sortable items)
    n = length(A)
    do
        swapped = false
        for i = 1 to n-1 inclusive do
            if A[i-1] > A[i] then
                swap(A[i-1], A[i])
                swapped = true
            end if
        end for
    while swapped
end procedure
```
Asymptotic Notation
Best Case: O(n)
Worst Case: O(n^2)
Bubble Sort is a simple comparison-based sorting algorithm. It repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order.

## Example of Insertion Sort
```
procedure insertionSort(A : list of sortable items)
    for i = 1 to length(A) - 1 do
        key = A[i]
        j = i - 1
        while j >= 0 and A[j] > key do
            A[j + 1] = A[j]
            j = j - 1
        end while
        A[j + 1] = key
    end for
end procedure

```
Asymptotic Notation
Best Case: O(n)
Worst Case: O(n^2)
Insertion Sort is a simple sorting algorithm that builds the final sorted array one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.


## Example of Selection Sort
```
procedure selectionSort(A : list of sortable items)
    n = length(A)
    for i = 0 to n-2 do
        minIndex = i
        for j = i+1 to n-1 do
            if A[j] < A[minIndex] then
                minIndex = j
            end if
        end for
        swap(A[i], A[minIndex])
    end for
end procedure

```
Asymptotic Notation
Best Case: O(n^2)
Worst Case: O(n^2)
Selection Sort is a simple in-place comparison-based sorting algorithm. It divides the input list into a sorted and an unsorted region, repeatedly selects the smallest element from the unsorted region, and swaps it with the first element of the unsorted region..
